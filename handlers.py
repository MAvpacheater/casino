from aiogram import Dispatcher, types
from aiogram.types import Message
from utils import get_or_create_user, update_balance, get_balance, set_referral, transfer_coins
import random, time

BONUS_HOURLY = 25
BONUS_DAILY = 100
BONUS_HOUR = 3600
BONUS_DAY = 86400

def register_handlers(dp: Dispatcher):
    @dp.message_handler(commands=["start"])
    async def start_cmd(message: Message):
        user = get_or_create_user(message.from_user)
        ref_id = message.get_args()
        if ref_id.isdigit():
            set_referral(user['user_id'], int(ref_id))
        await message.answer(f"–ü—Ä–∏–≤—ñ—Ç, {message.from_user.full_name}!\n–¢–≤—ñ–π –±–∞–ª–∞–Ω—Å: {user['balance']} –∫–æ—ñ–Ω—ñ–≤.")

    @dp.message_handler(commands=["balance"])
    async def balance_cmd(message: Message):
        user = get_or_create_user(message.from_user)
        await message.answer(f"–£ —Ç–µ–±–µ {user['balance']} –∫–æ—ñ–Ω—ñ–≤.")

    @dp.message_handler(commands=["bonus"])
    async def bonus_cmd(message: Message):
        user = get_or_create_user(message.from_user)
        now = int(time.time())
        bonuses = []

        if now - user['last_hourly_bonus'] >= BONUS_HOUR:
            update_balance(user['user_id'], BONUS_HOURLY)
            bonuses.append(f"+{BONUS_HOURLY} –∫–æ—ñ–Ω—ñ–≤ (—â–æ–≥–æ–¥–∏–Ω–Ω–∏–π –±–æ–Ω—É—Å)")
            user['last_hourly_bonus'] = now

        if now - user['last_daily_bonus'] >= BONUS_DAY:
            update_balance(user['user_id'], BONUS_DAILY)
            bonuses.append(f"+{BONUS_DAILY} –∫–æ—ñ–Ω—ñ–≤ (—â–æ–¥–µ–Ω–Ω–∏–π –±–æ–Ω—É—Å)")
            user['last_daily_bonus'] = now

        if bonuses:
            await message.answer("–û—Ç—Ä–∏–º–∞–Ω–æ –±–æ–Ω—É—Å–∏:\n" + "\n".join(bonuses))
        else:
            await message.answer("–ë–æ–Ω—É—Å –≤–∂–µ –æ—Ç—Ä–∏–º–∞–Ω–æ. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.")

    @dp.message_handler(commands=["referral"])
    async def referral_cmd(message: Message):
        await message.answer(f"–¢–≤–æ—î —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:\nhttps://t.me/{(await message.bot.get_me()).username}?start={message.from_user.id}")

    @dp.message_handler(commands=["transfer"])
    async def transfer_cmd(message: Message):
        parts = message.text.split()
        if len(parts) != 3:
            await message.reply("–ü—Ä–∏–∫–ª–∞–¥: /transfer @username 100")
            return
        _, username, amount_str = parts
        try:
            amount = int(amount_str)
            if amount <= 0:
                raise ValueError()
        except ValueError:
            await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ —Å—É–º–∞.")
            return

        result = transfer_coins(message.from_user.id, username.replace("@", ""), amount)
        await message.reply(result)

    @dp.message_handler(commands=["guess"])
    async def guess_cmd(message: Message):
        number = random.randint(1, 10)
        await message.answer("–í–≥–∞–¥–∞–π —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 10! –ù–∞–ø–∏—à–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.")
        dp.register_message_handler(guess_response, state=None, user_data={"number": number})

    async def guess_response(message: Message, **kwargs):
        number = kwargs['user_data']['number']
        try:
            guess = int(message.text.strip())
            if guess == number:
                update_balance(message.from_user.id, 50)
                await message.answer("üéâ –í—ñ—Ä–Ω–æ! –¢–∏ –æ—Ç—Ä–∏–º–∞–≤ 50 –∫–æ—ñ–Ω—ñ–≤.")
            else:
                await message.answer(f"–ù–µ –≤–≥–∞–¥–∞–Ω–æ. –ë—É–ª–æ —á–∏—Å–ª–æ {number}.")
        except:
            await message.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        dp.unregister_message_handler(guess_response)

    @dp.message_handler(commands=["roulette"])
    async def roulette_cmd(message: Message):
        result = random.choice(["—á–µ—Ä–≤–æ–Ω–µ", "—á–æ—Ä–Ω–µ", "–∑–µ—Ä–æ"])
        update = 100 if result == "—á–µ—Ä–≤–æ–Ω–µ" else -50
        update_balance(message.from_user.id, update)
        await message.answer(f"üé° –†—É–ª–µ—Ç–∫–∞: {result.capitalize()}! {'+' if update > 0 else ''}{update} –∫–æ—ñ–Ω—ñ–≤.")

    @dp.message_handler(commands=["casino"])
    async def casino_cmd(message: Message):
        symbols = ["üçí", "üçã", "üçá", "üíé"]
        roll = [random.choice(symbols) for _ in range(3)]
        win = 100 if len(set(roll)) == 1 else -20
        update_balance(message.from_user.id, win)
        await message.answer(f"{' '.join(roll)}\n{'üéâ –í–∏–≥—Ä–∞—à!' if win > 0 else 'üò¢ –ü—Ä–æ–≥—Ä–∞—à.'} {'+' if win > 0 else ''}{win} –∫–æ—ñ–Ω—ñ–≤.")

    @dp.message_handler(commands=["minesweeper"])
    async def minesweeper_cmd(message: Message):
        grid = [random.choice(["üí£", "üü©", "üü©"]) for _ in range(5)]
        if "üí£" in grid:
            update = -30
            msg = "üí• –¢–∏ –Ω–∞—Ç—Ä–∞–ø–∏–≤ –Ω–∞ –º—ñ–Ω—É!"
        else:
            update = 60
            msg = "‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ–±—ñ–π—à–æ–≤ –≤—Å—ñ –º—ñ–Ω–∏!"
        update_balance(message.from_user.id, update)
        await message.answer(f"{''.join(grid)}\n{msg} {'+' if update > 0 else ''}{update} –∫–æ—ñ–Ω—ñ–≤.")
